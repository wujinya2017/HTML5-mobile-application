{"version":3,"sources":["ShowTime.js","Todolist/Todoing.js","Todolist/Todoinput.js","Todolist/Todolist.js","Request.js","index.js"],"names":["React","Component","Todoing","this","props","a","className","todo","map","item","idx","key","onClick","delTodo","defaultProps","Todoinput","handleInput","e","keyCode","addTodo","target","value","handleChange","setState","name","parseInt","state","n1","n2","style","color","fontSize","htmlFor","id","onChange","onKeyDown","type","dangerouslySetInnerHTML","__html","Todolist","addItem","msg","console","log","delItem","splice","b","Object","keys","forEach","ReactDOM","render","document","getElementById","createElement"],"mappings":"sQAMuBA,IAAMC,U,MCHRC,E,iLAEP,IAAD,OACL,OACI,6BACI,uDAASC,KAAKC,MAAMC,GACpB,wBAAIC,UAAU,QAGNH,KAAKC,MAAMG,KAAKC,KAAI,SAACC,EAAKC,GAAN,OAAY,wBAAIC,IAAKD,GAAMD,EAAf,QAAyB,4BAAQG,QAAS,kBAAI,EAAKR,MAAMS,QAAQH,KAAxC,0B,GAT5CT,aAmBrCC,EAAQY,aAAa,CACjBP,KAAK,CAAC,EAAE,EAAE,GACVF,EAAE,K,YCceU,E,YACjB,aAAc,IAAD,8BACT,+CAMJC,YAAc,SAACC,GACM,KAAdA,EAAEC,SACD,EAAKd,MAAMe,QAAQF,EAAEG,OAAOC,QATvB,EAYbC,aAAe,SAACL,GACZ,EAAKM,SAAL,eACKN,EAAEG,OAAOI,KAAOC,SAA0B,KAAjBR,EAAEG,OAAOC,MAAW,EAAEJ,EAAEG,OAAOC,UAZ7D,EAAKK,MAAQ,CACTC,GAAI,EACJC,GAAI,GAJC,E,sEAiBH,IAAD,OACL,OACI,6BAEI,2BAAOC,MAAO,CACVC,MAAM3B,KAAKuB,MAAMC,GAAGxB,KAAKuB,MAAME,GAAG,GAAG,MAAM,QAC3CG,SAAS,IAETC,QAAQ,OAJZ,sBAKA,2BAAOC,GAAG,MAAMT,KAAK,KAAKU,SAAU/B,KAAKmB,aAAcD,MAAOlB,KAAKuB,MAAMC,GAAIQ,UAAW,SAAClB,GAAD,OAAK,EAAKD,YAAYC,IAAImB,KAAK,SAP3H,IASI,2BAAOZ,KAAK,KAAKU,SAAU/B,KAAKmB,aAAcD,MAAOlB,KAAKuB,MAAME,GAAIO,UAAW,SAAClB,GAAD,OAAK,EAAKD,YAAYC,IAAImB,KAAK,SAC9G,uBAAGC,wBAAyB,CAACC,OAAOnC,KAAKuB,MAAMC,GAAGxB,KAAKuB,MAAME,MAC7D,qD,GA/BuB3B,aClClBsC,E,YACjB,aAAc,IAAD,uBACT,+CAmCJC,QAAQ,SAACC,GACL,EAAKlB,SAAS,CACVhB,KAAK,GAAD,mBAAK,EAAKmB,MAAMnB,MAAhB,CAAqBkC,MAE7BC,QAAQC,IAAIF,IAxCH,EA0CdG,QAAQ,SAACvC,GAIL,IAAIE,EAAK,YAAI,EAAKmB,MAAMnB,OACpBA,EAAK,EAAKmB,MAAMnB,MACfsC,OAAOxC,EAAE,GACb,EAAKkB,SAAS,CACVhB,KAAKA,IAETmC,QAAQC,IAAItC,GAGV,EAAKkB,SACH,CAAChB,UAtDL,EAAKmB,MAAM,CACPnB,KAAK,CAAC,EAAE,EAAE,IAqBd,IAAIF,EAAE,CAACA,EAAE,IAAIyC,EAAE,KAOf,IAAI,IAAIrC,KANRsC,OAAOC,KAAK3C,GAAG4C,SAAQ,SAACxC,GACpBiC,QAAQC,IAAIlC,GACZiC,QAAQC,IAAItC,EAAEI,OAIFJ,EAEZqC,QAAQC,IAAItC,GAjCP,S,sEA4DT,OACI,6BAEI,kBAAC,EAAD,CAAWc,QAAShB,KAAKqC,UACzB,kBAAC,EAAD,CAAS3B,QAASV,KAAKyC,QAASrC,KAAMJ,KAAKuB,MAAMnB,Y,GAjE3BN,a,MCFDA,YCWrCiD,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SA2C1CrD,IAAMsD,cACZ,MACA,CAAC,GAAK,OACN,SACAtD,IAAMsD,cACF,KACA,CAAC,GAAK,KACN,a","file":"static/js/main.4aa340a0.chunk.js","sourcesContent":["import React ,{Component,Fragment} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\n//8.类定义组件\r\nclass ShowTime extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            str : '12345',\r\n            time:new Date().toLocaleString()\r\n        }\r\n        setTimeout(()=>{\r\n            this.setState({\r\n                time:new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n        this.handleClick = this.handleClick.bind(this);\r\n        console.log('constructor',this.props.word)\r\n    }\r\n    componentDidMount(){\r\n        console.log('componentDidMount');\r\n    }\r\n    shouldComponentUpdate(){\r\n        return true;\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getsnapshot');\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('didupdate');  \r\n    }\r\n    handleClick(num,e){\r\n        console.log(num,e);\r\n        console.log('点击成功！');\r\n    }\r\n    divClick(id,e){\r\n        console.log(id,e);\r\n        console.log('盒子点击成功！');\r\n    }\r\n    render(){\r\n        console.log('render');\r\n        return (//Fragment是一个组件\r\n            <Fragment>\r\n                <div>{this.state.str}</div>\r\n                <div onClick={(e)=>this.handleClick(1,e)}>{this.state.time}</div>\r\n                <div onClick={this.divClick.bind(this,5)}>hello{this.props.word}</div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n//默认导出,只能导出一次\r\nexport default ShowTime;\r\n//命名导出,可写多个export\r\n//export {ShowTime};","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Todoing extends Component {\r\n  \r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>正在进行{this.props.a}</h1>\r\n                <ul className=\"list\">\r\n                    {/* arr.forEach\\some\\every\\find\\map\\reduce\\ */}\r\n                    {\r\n                        this.props.todo.map((item,idx)=><li key={idx}>{item}-----<button onClick={()=>this.props.delTodo(idx)}>删除</button></li>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nTodoing.propTypes={\r\n    todo:PropTypes.array\r\n}\r\nTodoing.defaultProps={\r\n    todo:[2,3,4],\r\n    a:100\r\n}","import React, { Component } from 'react'\r\n\r\n//子组件----->父组件传递数据，调用子组件时往子组件传递一个函数\r\n// 子组件通过props调用该函数\r\n\r\n//受控组件和非受控组件\r\n\r\n//受控组件：value值被react的状态控制\r\n//可以方便拿到input框的值，实时处理或获取输入的内容\r\n/*\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            val : 'todo'\r\n        }\r\n    }\r\n\r\n    handleInput = (e)=>{\r\n        if (e.keyCode === 13) {\r\n            this.props.addTodo(this.state.val);\r\n        }\r\n    }\r\n    handleChange =(e)=>{\r\n        this.setState({\r\n            val:e.target.value\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input onChange={(e)=>this.handleChange(e)} value={this.state.val} onKeyDown={(e)=>this.handleInput(e)} type='text'/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            n1: 0,\r\n            n2: 0\r\n        }\r\n    }\r\n    handleInput = (e)=>{\r\n        if(e.keyCode === 13){\r\n            this.props.addTodo(e.target.value);\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]: parseInt(e.target.value===''?0:e.target.value)\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* htmlFor是input的id值 */}\r\n                <label style={{\r\n                    color:this.state.n1+this.state.n2>10?'red':'green',\r\n                    fontSize:50\r\n                    }} \r\n                    htmlFor=\"inp\">输入：</label>\r\n                <input id=\"inp\" name=\"n1\" onChange={this.handleChange} value={this.state.n1} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n                +\r\n                <input name=\"n2\" onChange={this.handleChange} value={this.state.n2} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n                <p dangerouslySetInnerHTML={{__html:this.state.n1+this.state.n2}}></p>\r\n                <button>查询</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n//非受控组件\r\n//代码简单，比较适用于一次性获取表单的值\r\n/*\r\nexport default class Todoinput extends Component {\r\n    componentDidMount(){\r\n        console.log(this.inp.value);\r\n    }\r\n    search = ()=>{\r\n        console.log(this.inp.value);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input ref={(inp)=>this.inp = inp} type=\"text\"/>\r\n                <button onClick={this.search}>查询</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n*/","import React, { Component } from 'react';\r\nimport Todoing from './Todoing';\r\nimport Todoinput from './Todoinput';\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            todo:[1,2,3]\r\n        }\r\n        // var arr=[1,2,{a:100}];\r\n        // var b=[...arr];\r\n        // var b=JSON.parse(JSON.stringify(arr));\r\n        // b[2].a=200;\r\n        // console.log(arr);\r\n      \r\n\r\n        //对象的拷贝\r\n        //var a={a:100};\r\n        // var b={b:200};\r\n        // var o=Object.assign(a,b);\r\n        // var o1=Object.assign({},a,b)\r\n        // console.log(o);\r\n        // console.log(o==a);//true\r\n        // console.log(o1==a);//false\r\n        // console.log(o1===a);//false\r\n          \r\n        //Object遍历一个对象\r\n        //Object.keys返回由属性名组成的一个数组\r\n        var a={a:100,b:200};\r\n        Object.keys(a).forEach((item)=>{\r\n            console.log(item);\r\n            console.log(a[item]);\r\n        })\r\n        \r\n        //遍历一个对象\r\n        for(var item in a)\r\n        {\r\n            console.log(a);\r\n        }\r\n    }\r\n    addItem=(msg)=>{\r\n        this.setState({\r\n            todo:[...this.state.todo,msg]\r\n        })\r\n        console.log(msg)\r\n    }\r\n   delItem=(a)=>{\r\n       //this.state.todo.splice(a,1);  不要写\r\n       //深拷贝、浅拷贝\r\n       //1.不要直接改变、处理状态\r\n       var todo=[...this.state.todo];\r\n       var todo=this.state.todo;\r\n       todo.splice(a,1);\r\n        this.setState({\r\n            todo:todo\r\n        })\r\n        console.log(a);\r\n        //2.setState是异步的\r\n        //this.setState((state,props)=>({todo:state.todo+1}))\r\n          this.setState(\r\n            {todo}\r\n        )\r\n   }\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n                <Todoinput addTodo={this.addItem}/>\r\n                <Todoing delTodo={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\nexport default class Request extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            data:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        //第一种方法\r\n        fetch('https://api.apiopen.top/musicRankingsDetails?type=1',{method:'post',body:'{name:111}'})\r\n            .then((res)=> {\r\n                return res.json();\r\n            })\r\n            .then((res)=> {\r\n                this.setState({\r\n                    data: res.result\r\n                })\r\n                console.log(res);\r\n            })\r\n            .catch(function(e) {\r\n                console.log(\"Oops, error\");\r\n            });\r\n        //第二种方法\r\n        // Axios.get('https://api.apiopen.top/musicRankingsDetails?type=1')\r\n        //     .then((res)=>{\r\n        //         console.log(res);\r\n        //         this.setState({\r\n        //             data: res.data.result\r\n        //         })\r\n        //     })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>请求接口</h1>\r\n                <ul>\r\n                    {\r\n                        this.state.data.map(\r\n                            (item,index)=>(<li key={index}>\r\n                                <h2>{item.album_title}</h2>\r\n                                <p>{item.author}</p>\r\n                            </li>)\r\n                        )\r\n                    }\r\n                    \r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","//引入\nimport React ,{Component,Fragment} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ShowTime from './ShowTime.js';\nimport Todolist from './Todolist/Todolist.js';\nimport Request from './Request';\n\n\n//组件交互\n//父组件 --->  子组件：调用时在子组件上添加属性\n//在子组件中通过props获取数据\n//ReactDOM.render(<Request/>,document.getElementById('root'));//将Request元素渲染到页面中\nReactDOM.render(<Todolist/>,document.getElementById('root'));\n\n\n//函数定义组件（无生命周期函数）\n//当只是渲染结构时\n// function ToDo(props) {\n//     return (\n//         <div>\n//             {props.list.length>=6?<h1>todo</h1>:''}\n//             {props.list.length>=5 && <h1>todo</h1>}\n//             <ul>\n//                 {/*循环渲染*/}\n//                 {/*条件渲染*/}\n//                 {\n//                     props.list.map(function (item,index) {\n//                         if(index%2 === 0){\n//                             return <li key={item}>{item}</li>\n//                         }\n//                     })//变量加中括号\n//                 }\n//             </ul>\n//         </div>\n//     )\n// };\n// var item = [<li>1</li>,<li>2</li>,<li>3</li>,4,5,6];\n// ReactDOM.render(<ToDo list={item}/>,document.getElementById('root'));\n\n\n\n//创建元素后不可变\n// function tick() { \n//     var e = <div>\n//                 <p>当前时间</p>\n//                 <h1>{new Date().toLocaleTimeString()}</h1>\n//             </div> ; \t\n//     ReactDOM.render(e, document.getElementById('root')); \n// } \n// tick();\n// setInterval(tick, 1000);\n\n\n// jsx表达式会被react转成一个对象，类似下面声明的obj对象\n//var ele = <h1>{str}</h1>;// <h1>{str}</h1>叫做DOM节点；不需要加引号\nvar ele = React.createElement(\n    'div',\n    {'id':'box'},\n    'react1',\n    React.createElement(\n        'h1',\n        {'id':'h'},\n        'react2'\n    )\n);\nvar obj = {\n    type : 'div',\n    props : {\n        id : 'box',\n        class : 'box-box',\n        children : ['hello react1',{\n            type : 'h1',\n            props : {\n                id : 'h',\n                class : 'h-h',\n                children : ['hello react2']\n            }\n        }]\n    }\n}\n//render(obj,document.getElementById('root'));\n\n\n// 自己声明render函数，实现页面渲染\nfunction render(obj,container) {\n    //文档碎片\n    var fr = document.createDocumentFragment();//不是真正的DOM节点，相当于容器\n\n    var ele = document.createElement(obj.type);\n    for (var item in obj.props) {\n        if (item === 'class') {\n            ele.className = obj.props[item];\n        }else if(item === 'children'){\n            for (var i = 0; i < obj.props[item].length; i++) {\n                if (typeof obj.props[item][i] === 'object') {\n                    render(obj.props[item][i],ele);\n                } else {\n                    var txt = document.createTextNode(obj.props[item][i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = obj.props[item];\n        }\n    }\n    fr.appendChild(ele);\n    container.appendChild(ele);\n}\n\n\n\n// 注意以下性能问题及优化方法\n\n// 加载html文件、浏览器解析html生成DOM树\n// link加载css文件、解析css规则、和DOM树结合生成render tree、浏览器渲染引擎渲染render tree\n\n// 页面回流（重排）：内容改变、大小改变、结构改变\n// 页面重绘：把字体颜色、背景颜色等样式改变\n\n// 1、node.offsetLeft、node.offsetWidth等慎用\n// var root = document.getElementById('root');\n// var width = root.offsetWidth;\n// setInterval(function(){\n//     width += 1\n//     root.style.width = width + 'px';\n// },100)\n\n// display、width、height、font-size等会引起页面回流\n// document.body.style.width = '100px';\n// document.body.style.height = '100px';\n// 2、声明一个css的一个类\n// .change{\n//     width: 100px;\n//     height: 100px;\n// }\n// document.body.className = 'change';\n\n// 3、对节点的操作先用变量代替\n// console.time('a');\n// var str = '';\n// for(var i=0;i<1000;i++){\n//     str += '<li>'+i+'</li>';\n// }\n// document.body.innerHTML = str;\n// console.timeEnd('a');\n// 4、文档碎片的概念\n\n\n//ReactDOM.render(<ShowTime word='React'/>,document.getElementById('root'));"],"sourceRoot":""}